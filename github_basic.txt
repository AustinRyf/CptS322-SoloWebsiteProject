1. Download GIT (not GITHUB) from: http://git-scm.com/downloads

2. Install GIT. 

From this step on, use a terminal (if you're using Linux/MacOS) or Git Bash (installed along with the windows version) for the commands.
Referred here for further information: https://help.github.com/articles/set-up-git

3. git config --global user.name "Your Name Here"   (Set up the name attached with your commit)
   git config --global user.email "your_email@youremail.com"  (Set the default email for notices and so on)

   These two settings have no association with your eecs account. They are just for notification purposes.

Now for the repo
https://help.github.com/articles/create-a-repo

4. For our purpose, the repository has been set up, so you can skip the "make a new repo" step. 

   create a new folder somewhere, for instance your Desktop. cd into it from the terminal/bash

   clone your rep into this folder:
   git clone your-rep-location  (use the HTTPS link on your rep page)

   You'll be prompted to enter your username and password, the pair you used to login github.eecs.wsu.edu

   If succeed, you'll see a new directory show up. Congrats!

5. Now, to do actual work, we need to "push" our work to the repository.

   Create a new file "test.txt" in the rep folder. Now go back to bash to add the files to git:

   git add test.txt

   Then commit a message:

   git commit -m 'any message'

   Finally, push it to the repository

   git push

   Now, check back on the website. If succeed, the new file will show up there.

6. To get other people's changes back on to your own local machine, we need to do "pull" or fetch.
   
   To try it by yourself, open the "test.txt" from website, click the EDIT button and make any modifications you want. Enter a commit message and save it directly. The file is now changed.

   Go back to your bash:
 
   git pull

   Enter the credentials if prompted. If succeed, you'll see the local file has been changed as well.

7. You can find a plugin to store your username and password so that you don't have to enter it every single time. 

8. "pull" or "fetch" before you begin; "commit" and "push" after you're done; do another "pull" to check if there are any updates afterwards!

9. For other operations such as fork or remove a file from git, refer to the help page for more information.





